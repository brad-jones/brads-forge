on:
  push:
    branches:
      - master
  schedule:
    - cron: 28 3 * * *
  workflow_dispatch:

jobs:
  generate:
    runs-on: ubuntu-latest
    outputs:
      artifact-id: ${{ steps.recipes.outputs.artifact-id }}
    steps:
      - name: ⬇️ Git Checkout
        uses: actions/checkout@v4

      - name: ⚙️ Install pixi env
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.39.2
          activate-environment: true

      - name: ⚙️ Install Deno Deps
        run: deno install

      - name: 🧑‍🍳 Generate Rattler Build Recipes
        run: deno task generate
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PREFIX_TOKEN: ${{ secrets.PREFIX_TOKEN }}

      - name: ⬆️ Upload Rattler Build Recipes
        uses: actions/upload-artifact@v4
        id: recipes
        with:
          name: recipes
          path: generated-forge/**/*
          if-no-files-found: ignore

  build:
    needs: generate
    if: ${{ needs.generate.outputs.artifact-id }}
    name: ${{ join(matrix.targets) }}
    runs-on: ${{ matrix.os }}
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - { targets: [linux-32, linux-64, linux-aarch64], os: ubuntu-latest }
          - { targets: [win-32, win-64, win-arm64], os: windows-latest }
          - { targets: [osx-64], os: macos-13 }
          - { targets: [osx-arm64], os: macos-14 }
    steps:
      - name: ⬇️ Git Checkout
        uses: actions/checkout@v4

      - name: ⬇️ Download Generated Recipes
        uses: actions/download-artifact@v4
        with:
          path: ./generated-forge

      - name: ⚙️ Install pixi env
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.39.2
          activate-environment: true

      - name: 📦 Build Generated Recipes
        shell: bash
        run: |
          targets="${{ join(matrix.targets) }}"
          for target in ${targets//,/ }; do
            rattler-build build --recipe-dir ./generated-forge \
              --skip-existing=all --target-platform=$target --test=native \
              -c conda-forge -c https://prefix.dev/brads-forge
          done

      - name: 🎉 Publish to prefix.dev
        shell: bash
        run: |
          for file in output/**/*.conda; do
            if [ -f "$file" ]; then
              rattler-build upload prefix -c brads-forge "$file"
            fi
          done
